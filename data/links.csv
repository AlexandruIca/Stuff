id,url,title,description
0,"https://threejs.org/","Three.js for Learning Graphics Programming","An easy to use graphics lib for JS"
1,"https://jorenjoestar.github.io/post/data_driven_rendering_pipeline/","Data Driven Rendering: Pipelines","A description of a simplified render graph, very well written, a lot of concepts that video games use are presented"
2,"https://www.pbrt.org/index.html","Physically Based Rendering: From Theory to Implementation","Introduces concepts and theory of photorealistic rendering, includes code examples as well"
3,"https://www.youtube.com/watch?v=GNO_CYUjMK8","Making WebGL Dance","Nothing WebGL specific, introduces core concepts in 3D graphics in a very attractive way"
4,"https://www.shadertoy.com/","Shadertoy","A variety of cool examples of shaders running directly in the browser"
5,"https://iquilezles.org/","Inigo Quilez's Website","Co-creator of Shadertoy, lots of interesting articles/videos/code samples"
6,"https://www.youtube.com/user/raviramamoorthi/videos","Raviramamoorthi","A lot of courses on computer graphics, especially ray tracing, but also stuff like OpenGL or 2D stuff"
7,"https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm","Bentley-Ottmann Algorithm","O((n+k) log n) algorithm for finding intersections of line segments"
8,"https://raphlinus.github.io/gpu/2020/02/12/gpu-resources.html","GPU Resources","A pretty big list of resources for GPU programming in general, includes stuff related to OpenCL/Cuda, Vulkan, WebGPU, Metal, SPIR-V, shading lanugages"
9,"https://github.com/servo/surfman","Surfman","Low level rust library for managing surfaces using GPU memory, meaning render targets, can draw to a window, can draw to multiple windows, probably useful as a reference for implementing a window API"
10,"https://www.cprogramming.com/tutorial/animation/animation_engine_design.html","Designing An Object Oriented Animation Engine","A bit outdated, but probably useful as a reference for implementing an animation engine"
11,"https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations","Navier Stokes Equations","Useful for fluid simulations"
12,"https://www.youtube.com/watch?v=UUfXWzp0-DU","Flutter's Rendering Pipeline","A look at some of the internals of Flutter"
13,"https://flutter.dev/docs/resources/inside-flutter","Inside Flutter","A deep dive into the inner workings of Flutter"
14,"http://www.songho.ca/opengl/gl_projectionmatrix.html","OpenGL Projection Matrix","Presents how the projection matrix works"
15,"https://users.cg.tuwien.ac.at/zsolnai/gfx/rendering-course/","Rendering Course","From the 'Two Minutes Papers' guy"
16,"https://www.youtube.com/watch?v=P6UKhR0T6cs&t=1540s","The Physics of Light and Rendering","From John Carmack, explains 3D concepts"
17,"https://www.youtube.com/watch?v=bGe-d09Nc_M&t=4289s","How 3D Video Games Do Graphics","From Jonathan Blow, explains core concepts in 3D graphics"
18,"https://thebookofshaders.com/","The Book of Shaders","A lot of stuff regarding fragment shaders"
19,"https://www.iquilezles.org/www/articles/terrainmarching/terrainmarching.htm","Ray Marching Terrain","Generating a very detailed scene with ray marching"
20,"https://acko.net/blog/animate-your-way-to-glory/","Animate Your Way to Glory","How to use animations for a nice UI"
21,"https://rainbowhunt.com/","Rainbowhung","Rain simulator, lots of resources in the 'credits' section"
22,"https://tympanus.net/codrops/2015/11/04/rain-water-effect-experiments/","Rain and Water Effect Experiments","Generating rain effect with WebGL"
23,"https://en.wikipedia.org/wiki/Gilbert%E2%80%93Johnson%E2%80%93Keerthi_distance_algorithm","Gilbert-Johnson-Keerthi Distance Algorithm","AKA GJK, useful especially for collision detection"
24,"https://github.com/prideout/prideout.github.com","Philip Rideout","Various computer graphics techniques"
25,"https://graphicscodex.courses.nvidia.com/app.html","The Graphics Codex Book","Book on computer graphics, especially physically based rendering"
26,"http://graphicscodex.com/projects/projects/","Grphics Codex: Graphics Programming Projects","Projects to do to learn about computer graphics"
27,"http://www.realtimerendering.com/","Real-Time Rendering","Covering a lot of stuff on (duh) real time rendering, including curves and BRDFs(of course)"
28,"https://www.amazon.com/Computer-Graphics-Scratch-Gabriel-Gambetta/dp/1718500769?tag=realtimerenderin&pldnSite=1","Computer Graphics from Scratch: A Programmer's Introduction to 3D Rendering","Building a renderer from scratch"
29,"https://www.reddit.com/r/GraphicsProgramming/comments/iiveq7/computer_graphics_learning_resources/","Computer Graphics Learning Resources","List of useful links for computer graphics"
30,"https://brlcad.org/","BRL-CAD","Interactive geometry editing, high performance ray tracing and other stuff, probably useful as a reference for implementing something resembling a CAD"
31,"https://google.github.io/filament/Filament.md.html","Google Filament: Description","Deep dive into the inner workings of Filament, useful even for an overview of physically based rendering in general"
32,"https://google.github.io/filament/Materials.html","Materials Guide For Filament","Overview of the material types in Filament, useful to see al different kinds of materials for physically based rendering"
33,"https://www.youtube.com/watch?v=ukkbNKTgf5U&t=292s","Rendering Isometric Tiles","Easy to follow tutorial on how to render isometric tiles in 2D"
34,"http://www.jezzamon.com/fourier/index.html","An Interactive Introduction to Fourier Transforms","Title says it all"
35,"https://www.youtube.com/watch?v=8--5LwHRhjk","Painting a Selfie Girl, With Maths","Using ray marching to draw a character"
36,"https://bottosson.github.io/posts/colorwrong/","How Software Gets Color Wrong","Presents how to represent color in software correctly"
37,"https://github.com/kobzol/hardware-effects-gpu","Hardware Effects on the GPU","How hardware affects performance on the GPU in various cases"
38,"https://vkguide.dev/docs/extra-chapter/multithreading/","Multithreading for Game Engines","Overview of an architecutre for game engines"
39,"https://interplayoflight.wordpress.com/2020/05/09/gpu-architecture-resources/","GPU Architecture Resources","A lot of resources on how the GPU works"
40,"https://github.com/DinoZ1729/Galaxy","ASCII Simulation of Colliding Galaxies","Probably useful as a reference for implementing ASCII art"
41,"https://www.youtube.com/watch?v=O-52enqUSNw&t=348s","Is a Realistic Water Bubble Simulation Possible?","A relatively simple technique for generating bubbles"
42,"https://projectf.io/posts/fpga-graphics/","Exploring FPGA Graphics","Seeing how graphics work at the hardware level, uses SystemVerilog"
43,"https://github.com/jdah/minecraft-weekend","Minecraft in 48 Hours in C","Easy to read source of a minecraft 'clone', probably useful as a reference for seeing how to render voxels"
44,"https://github.com/jbush001/NyuziProcessor","Nyuzi Processor: Experimental GPGPU Processor Hardware Design","Uses SystemVerilog and LLVM"
45,"https://www.youtube.com/watch?v=mdPeXJ0eiGc","Design Patterns for Low-Level Real-Time Rendering","Among other things, there are some cool tricks for ring buffers here, some tips fow working with aligned data for GPU access"
46,"https://www.jendrikillner.com/post/graphics-programming-weekly-issue-165/","Graphics Programming Weekly","Various articles on all kinds of stuff related to computer graphics"
47,"https://www.youtube.com/watch?v=LRbgii6mVU4","How Normal Mapping Works","Video explaining in quite some detail how normal mapping works"
48,"https://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/","What Every Coder Should Know About Gamma","A very nice dive into gamma correction"
49,"https://cliutils.gitlab.io/modern-cmake/","An Introduction to Modern CMake","A very useful resource for learning modern practises for CMake"
50,"https://avikdas.com/2019/05/14/real-world-dynamic-programming-seam-carving.html","Real-World Dynamic Programming: Seam Carving","An easy to follow resource for implementing seam carving"
51,"http://gitlet.maryrosecook.com/docs/gitlet.html","Gitlet - Git in 600 Words","Learn how git workds under the covers, with code samples"
52,"https://www.feider.space/art/en/steganotut.html","Steganography Tutorial","Easy to follow, shows how to encode data in bitmaps"
53,"https://github.com/terrajobst/minsk","Minsk - Educational Compiler in C#","Illustrates basic concepts of compiler construction, also shows ways to expose APIs for parsing and type checking"
54,"https://www.leshenko.net/p/ugit/#","Ugit - Learn Git Internals With Python","Interactive way to learn about git, shows code samples with diffing"
55,"https://jc-progjava.github.io/Building-Neural-Networks-From-Scratch/","Building Neural Networks From Scratch","Learn how neural networks function"
56,"https://medium.com/@openmohan/dns-basics-and-building-simple-dns-server-in-go-6cb8e1cfe461","DNS Basics And Building a DNS Server in Go","Useful to bettern learn about DNS servers"
57,"https://en.wikipedia.org/wiki/Deflate","Deflate","Lossless data compression file format, used in gzip, PNG, ZIP"
58,"https://github.com/bradtraversy/vanillawebprojects","Vanilla Web Projects","Simple, useful projects that don't use any frameworks"
59,"https://preshing.com/20120710/memory-barriers-are-like-source-control-operations/","Memory Barriers Are Like Source Control Operations","Useful to understand how memory barriers work"
60,"https://preshing.com/20120930/weak-vs-strong-memory-models/","Weak vs. Strong Memory Models","Useful to understand how different memory models work for different architectures"
61,"https://preshing.com/20121019/this-is-why-they-call-it-a-weakly-ordered-cpu/","This Is Why They Call It a Weakly-Ordered CPU","Concrete examples that show how a weak memory model affects a program"
62,"https://news.ycombinator.com/item?id=26790827","A Primer on Memory Consistency And Cache Coherence","Useful to better understand how caching works"
63,"https://www.youtube.com/watch?v=0MdSJsCTRkY","An Allocator Is a Handle to a Heap","Clearing some thins up about manipulating allocators"
64,"https://stackoverflow.com/a/54849003/8622014","Allocator Propagation Policies","Clearing up what happens when a move happens and custom allocators are involved"
65,"https://marek.vavrusa.com/memory/","What a C Programmer Should Know About Memory","Useful to understand how virtual memory works"
66,"https://github.com/rby90/project-based-tutorials-in-c","Project Based Tutorials in C","Lots of resources to learn C hands-on"
67,"https://loup-vaillant.fr/articles/crypto-is-not-magic","Cryptography Is Not Magic","Very nice resource to learn about crypto algorithms"
68,"https://avikdas.com/2019/07/29/improved-seam-carving-with-forward-energy.html","Improved Seam Carving With Forward Energy","A nice, easy to follow improvement to seam carving"
69,"http://www.buildyourownlisp.com/","Build Your Own Lisp","A nice way to learn compiler development"
70,"https://news.ycombinator.com/item?id=26842900","A Universal I/O Abstraction For C++","A nice overview of networking in general for C++, also includes stuff about `io_uring`"
71,"https://quuxplusone.github.io/blog/2021/04/17/pathological-string-appends/","Optimizing `string::append` Is Harder Than It Looks","A deep dive into implementing a standard-conforming `string::append`"
72,"https://tokio.rs/blog/2019-10-scheduler","Making The Tokio Scheduler 10x Faster","A real-world application of work stealing"
73,"https://research.nvidia.com/publication/high-performance-software-rasterization-gpus","High Performance Software Rasterization on GPUs","Sort-middle architecture for software rendering using compute shaders"
74,"https://interplayoflight.wordpress.com/2021/04/18/how-to-read-shader-assembly/","How To Read Shader Assembly","Easy to follow overview on shader assebly"
75,"https://news.ycombinator.com/item?id=26873691","Massively-Parallel Rendering Of Closed-Form Implicit Surfaces","Rendering implicit surfaces(both 2D and 3D) on the GPU"
76,"https://github.com/ekzhang/graphics-workshop","Graphics Workshop","Learn computer graphics by writing shaders"
77,"https://mortoray.com/2015/06/05/quickly-drawing-a-rounded-rectangle-with-a-gl-shader/","Quickly Drawing a Rounded Rectangle With a GL Shader","Simple tutorial on how to draw rounded rects"
78,"http://imnaseer.net/paxos-from-the-ground-up.html?section=1&slide=1","Paxos Algorithm From The Ground Up","Learn the paxos algorithm interactively"
79,"http://pmg.csail.mit.edu/papers/osdi99.pdf","Practical Byzantine Fault Tolerrance","Algorithm that is able to tolerrate Byzantine faults"
80,"https://en.wikipedia.org/wiki/Paxos_(computer_science)","Paxos","Family of protocols for solving consensus in an unreliable network"
81,"https://matklad.github.io/2020/11/01/notes-on-paxos.html","Notes On Paxos","May be useful to better understand the paxos algorithm"
82,"https://news.ycombinator.com/item?id=26898147","Diffie-Hellman Exchange For The Layman","Easy to understand explanation for Diffie-Hellman"
83,"https://cpp-rendering.io/thread-pool-with-coroutines-threads/","Thread Pool With Coroutines","Work stealing implemented in C++, also useful to learn more about the coroutine API"
84,"https://en.wikipedia.org/wiki/Otokichi","Otokichi","Japanese that had to live on a drifting ship for 14 months"
85,"https://www.amazon.com/Killer-Whale-Who-Changed-World/dp/1771641932","The Killer Whale Who Changed The World","Learning more about orcas"
86,"https://www.amazon.com/Listening-Whales-What-Orcas-Taught/dp/0345442881","Listening to Whales: What The Orcas Have Taught Us","Learning more about orcas"
87,"https://www.amazon.com/Orcas-Men-Killer-Whales-Teach/dp/1468313029","Of Orcas And Men: What Killer Whales Can Teach Us","Learning more about orcas"
88,"https://www-igm.univ-mlv.fr/~lecroq/string/node19.html","Quick Search Algorithm(Boyer-Moore)","A simplification of the boyer-moore algorithm that is easy to implement"
89,"http://www.bradrodriguez.com/papers/moving1.htm","Moving Forth","Developing Forths for the 6809, 8051 and Z80"
90,"https://modernc.gforge.inria.fr/","Modern C","A book on C from one of the editors of the C standard"
91,"https://www.freecodecamp.org/news/how-to-search-google-like-a-pro/","Use Google Like a Pro","Searching on google tips and tricks"
92,"https://github.com/olilarkin/awesome-musicdsp","Awesome Music DSP","Curated list of resources for audio programming"
93,"https://www.youtube.com/watch?v=_zQ_uBAHA4A","Everything You Knew About Colour Is Wrong","How a lot of the times color is processed incorrectly"
94,"https://blog.can.ac/2021/03/22/speculating-x86-64-isa-with-one-weird-trick/","Speculating The Entire x86-64 Instruction Set In Seconds With This One Weird Trick","Very interesting read about x86"
95,"https://cheats.rs/","Rust Language Cheatsheet","Very useful as a quick reference"
96,"https://jimfawcett.github.io/SiteMap","Site Map","Lots of resources for learning Rust(and not only Rust)"
97,"https://github.com/atollk/copper/","Copper","Go-style channels in C++, header-only, useful to learn more about concurrency"
98,"https://arstechnica.com/science/2021/04/children-of-chernobyl-cleanup-crew-dont-have-excess-mutations/","Children Of Chernobyl Cleanup Crew Don't Have Excess Mutations","A quick look at how radiatino affects DNA"
99,"https://marz.utk.edu/my-courses/cosc230/book/example-risc-v-assembly-programs/","Example RISC-V Assembly Programs","Useful to learn RISC-V assebly"
100,"https://github.com/allaboutapps/integresql","IntegreSQL","Testing with a live Postgre database, does efficient recreating and pooling of databases"
101,"https://news.ycombinator.com/item?id=26952557","My Current HTML Boilerplate","Useful boilerplate for HTML for whenever starting a new project"
102,"https://philosophicaldisquisitions.blogspot.com/2021/03/understanding-legal-argument-1-five.html","Understanding Legal Argument: The Five Types of Argument","A nice introduction to legal arguments"
103,"https://kk.org/thetechnium/","The Technium","99 additional bits of unsolicited advice"
104,"https://www.capitaldaily.ca/news/the-man-who-stole-a-hotel","A Man Who Stole A Hotel","A very captivating read of a sad story of a ponzi scheme"
105,"http://const.me/articles/simd/simd.pdf","SIMD For C++ Developers","A pretty in-depth tutorial on SIMD intrinsics"
106,"https://drewdevault.com/2021/04/26/Cryptocurrency-is-a-disaster.html","Cryptocurrency Is An Abject Disaster","Send this to anoyone who is excited about cryptocurrency"
107,"https://arxiv.org/abs/1105.2576","TRX: A Formally Verified Parser Interpreter","Useful to learn more about Coq and parsing in general"
108,"http://gallium.inria.fr/blog/verifying-a-parser-for-a-c-compiler/","Verifying a Parser For a C Compiler","Useful to learn more about parsing in general"
109,"http://gallium.inria.fr/~fpottier/publis/jourdan-leroy-pottier-validating-parsers.pdf","Validating LR(1) Parsers","Another great resource to learn more about formal verification and parsing"
110,"https://github.com/hemanth/functional-programming-jargon","Functional Programming Jargon","Check this whenever you hear weird stuff from the FP world"
111,"https://en.wikipedia.org/wiki/S%C3%B8rv%C3%A1gsvatn","Sorvagsvatn","Very beautiful lake in Feroe Islands that can trick your eyes"
112,"http://www.simbata.ro/","Cabana Valea Sâmbetei","În Munții Făgăraș, pare zonă frumoasă"
113,"https://cabanafrasin.ro/trasee-prin-piatra-craiului/","Trasee Prin Piatra Craiului","Titlul spune tot"
114,"https://en.wikipedia.org/wiki/Lake_Tahoe","Lake Tahoe","Beautiful lake in US between California and Nevada"
115,"https://en.wikipedia.org/wiki/Jasper_National_Park","Jasper National Park","Very beautiful location in Alberta, Canada"
116,"https://en.wikipedia.org/wiki/%C3%89tretat","Étretat","Very nice location near Le Havre"
117,"https://en.wikipedia.org/wiki/Pikes_Peak","Pikes Peak","Very beautiful mountain, the place where some rally takes place"
118,"https://en.wikipedia.org/wiki/Lysebotn","Lysebotn","A beautiful village in Norway"
119,"https://en.wikipedia.org/wiki/Trollstigen","Trollstigen","A serpentine mountain road in Norway"
120,"https://lamport.azurewebsites.net/pubs/paxos-simple.pdf","Paxos Made Simple","Paxos explained in plain english"
121,"https://raft.github.io/","Raft Consensus Algorithm","Alternative algorithm to paxos"
122,"https://www.reddit.com/r/cpp/comments/lgvmre/move_semantics_in_c_and_rust_the_case_for/","Move Semantics in C++ and Rust: The Case For Destructive Moves","Discussion about how destructive moves don't really fit for C++"
123,"https://www.reddit.com/r/rust/comments/n16kod/swash_complex_text_shaping_and_glyph/","Swash","Text shaping and rasterization, seems to have a readable codebase, probably useful as a reference if I want to implement something like this"
124,"https://github.com/dfrg/zeno","Zeno","2D vector graphics library, seems to have a readable(and small) codebase, probably useful as a reference"
125,"https://www.gabrielgambetta.com/computer-graphics-from-scratch/00-introduction.html","Computer Graphics From Scratch","Building two renderers(a ray tracer and a 3D rasterizer) from scratch"
126,"https://www.scratchapixel.com/","Scratchapixel","A lot of fundamental concepts in computer graphics explained, especially ray tracing(but not only)"
127,"https://github.com/ssloy/tinyrenderer/wiki","Tiny Software Renderer","Software renderer in 500 lines of code"
128,"https://blog.demofox.org/2015/01/17/bresenhams-drawing-algorithms/","Bresenham's Run-Slice Line Drawing Algorithm","Another variant of Bresenham's algorithm, probably not too useful but still interesting to know"
129,"https://news.ycombinator.com/item?id=15074080","The Beauty Of Bresenham's Algorithm","Shows how the algorithm may be used to render more complex things like Bezier curves"
130,"https://github.com/Semmu/sdl_universe","SDL Universe","A simple, easy to understand software renderer"
131,"https://trenki2.github.io/blog/2017/06/06/developing-a-software-renderer-part1/","Developing a Software Renderer","An easy to understand tutorial on software rendering, also adds a pixel shader at some point"
132,"https://github.com/ianmurfinxyz/software_renderer","Real-Time Software Renderer in SDL","Title says it all, seems like the codebase is readable"
133,"https://fgiesen.wordpress.com/2013/02/10/optimizing-the-basic-rasterizer/","Optimizing The Basic Rasterizer","Using SIMD to improve triangle rasterization, also has some chapters on depth buffers and general software rendering"
134,"https://erkaman.github.io/posts/fast_triangle_rasterization.html","A Simple And Trivially Parallelizable Triangle Rasterization Approach","Presents the method of rendering with barycentric coordinates, has nice visualizations"
135,"https://www.digipen.edu/sites/default/files/public/docs/theses/salem-haykal-digipen-master-of-science-in-computer-science-thesis-an-optimized-triangle-rasterizer.pdf","An Optimized Triangle Rasterizer","Parallelizable approach to triangle rasterization"
136,"http://www.cs.cmu.edu/afs/cs/academic/class/15869-f11/www/readings/molnar94_sorting.pdf","A Sorting Classification Of Parallel Rendering","Rendering in parallel, present the sort-middle architecture"
137,"https://markussteinberger.net/papers/cuRE.pdf","A High-Performance Software Graphics Pipeline Architecturefor the GPU","Software rendering on the GPU"
138,"https://github.com/rasmusbarr/simdrast","SIMDRast","CPU rasterization using SIMD"
139,"https://bruop.github.io/frustum_culling/","SIMD Frustum Culling","Using SIMD for efficient frustum culling"
140,"http://www.vishalchovatiya.com/coroutine-in-c-language/","Coroutines in C","How coroutines could be implemented in C"
141,"https://www.amazon.com/Standard-C-Library-P-J-Plauger/dp/0131315099","Standard C Library","Teaches how to implement libc, also contains design decisions about different things from libc"
142,"https://www.bottomupcs.com/","Computer Science From The Bottom Up","Title is a bit clickbaity, it teaches UNIX concepts"
143,"https://news.ycombinator.com/item?id=25831271","Category Theory For My Kid","I want to teach my 2 year old category theory, what do you think?"
144,"https://ciechanow.ski/internal-combustion-engine/","Internal Combustion Engine","Very nice overview of how ICEs work, with animations"
145,"https://www.howacarworks.com/","How A Car Works","Paid course that goes pretty deep into how cars work"
146,"https://ciechanow.ski/cameras-and-lenses/","Cameras And Lenses","How pictures are taken"
147,"https://ciechanow.ski/lights-and-shadows/","Lights and shadows","How lights and shadows work"
148,"https://ciechanow.ski/gears/","Gears","How gears work"
149,"https://ciechanow.ski/alpha-compositing/","Alpha Compositing","Finally a good resource to learn about alpha compositing"
150,"https://ciechanow.ski/color-spaces/","Color Spaces","The ultimate guide to color spaces"
151,"https://www.oreilly.com/library/view/svg-text-layout/9781491933817/ch01.html","Understanding Text Layout","Even though this is part of the book, the first chapter is really good for seeing some general stuff about text layout"
152,"https://wdobbie.com/post/gpu-text-rendering-with-vector-textures/","Font Rendering With Vector Textures","A method that store curves in a grid for fast access in the fragment shader, renders directly on the GPU"
153,"http://jcgt.org/published/0006/02/02/paper.pdf","GPU-Centered Font Rendering Directly From Glyph Outlines","The method that is used in the 'Slug' library"
154,"https://gankra.github.io/blah/text-hates-you/","Text Rendering Hates You","Some things that are really difficult about text rendering"
155,"http://behdad.org/text/","The State Of Text Rendering","Relatively old article, still useful"
156,"https://pandasauce.org/post/linux-fonts/","The Sad State Of Text Rendering In Linux","Pretty Opinionated, may still be useful"
157,"https://medium.com/@evanwallace/easy-scalable-text-rendering-on-the-gpu-c3f4d782c5ac","Easy Scalable Text Rendering On The GPU","A Method similar to Loop-Blinn but seems much easier to implement"
158,"http://chanae.walon.org/pub/ttf/ttf_glyphs.htm","An Introduction To Glyphs","Old but still relevant, shows what glyphs are made of"
159,"https://www.w3.org/TR/jlreq/","Requirements For Japanese Text Layout","Probably useful if you ever want to make a text renderer"
160,"https://manishearth.github.io/blog/2017/01/14/stop-ascribing-meaning-to-unicode-code-points/","Let's Stop Ascribing Meaning To Codepoints","Useful to see how unicode works"
161,"https://eev.ee/blog/2015/09/12/dark-corners-of-unicode/","Dark Corners Of Unicode","Title says it all"
162,"http://litherum.blogspot.com/2019/03/addition-font.html","Addition Font","Implementing addition using the GSUB table"
163,"https://github.com/harfbuzz/harfbuzz/issues/1463#issuecomment-505592189","Some Details About DirectWrite","A sneak peek of DirectWrite internals"
164,"https://raphlinus.github.io/text/2020/10/26/text-layout.html","Text Layout Is A Loose Hierarchy Of Segmentation","Design consideratinos for text layout"
165,"https://simoncozens.github.io/fonts-and-layout/","Fonts And Layouts For Global Scripts","A WIP book on text layout"
166,"https://medium.com/@raphlinus/inside-the-fastest-font-renderer-in-the-world-75ae5270c445","Inside The Fastest Font Renderer In The World","Font rendering directly in an accumulation buffer, then calculating the prefix sum using SIMD"
167,"https://nothings.org/gamedev/rasterize/","How The `stb_truetype` Anti-Aliased Software Rasterizer v2 Works","Good explanation of trapezoidal coverage"
168,"http://projects.tuxee.net/cl-vectors/section-the-cl-aa-algorithm","The `cl-aa` Algorithm","Explanation of the algorithm behind Anti-Grain Geometry"
169,"https://people.gnome.org/~mathieu/libart/internals.html","Libart Internals","Some of the inner workings of libart"
170,"https://www.puredevsoftware.com/blog/2019/01/22/sub-pixel-gamma-correct-font-rendering/","Sub-Pixel, Gamma Correct Font Rendering","Title says it all"
171,"https://richardjharris.github.io/unicode-in-five-minutes.html","Unicode In 5 Minutes","Quick Overview Of Unicode"
172,"https://begriffs.com/posts/2019-05-23-unicode-icu.html","Unicode Programming, With Examples","Some common operations done on unicode strings"
173,"https://github.com/libgdx/libgdx/wiki/Distance-field-fonts","Distance Field Fonts","Code examples that show how to implement effects using signed distance fields"
174,"https://cdn.cloudflare.steamstatic.com/apps/valve/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf","Improved Alpha-Tested Magnification for Vector Textures and Special Effects","Original Valve paper on signed distance fields"
175,"https://damieng.com/blog/2007/06/13/font-rendering-philosophies-of-windows-and-mac-os-x","Font Rendering Philosophies Of Windows And MacOS X","Quick comparison of the renderers of these two platforms"
176,"https://material.io/design/typography/understanding-typography.html#type-properties","Understanding Typography","Typography design considerations"
177,"https://www.designsystems.com/color-guides/","Design Systems","Guides on correct color usage(and not only color, also general typography) for a beautiful design"
178,"https://tonsky.me/blog/emoji/","Emojis Under The Hood","How emojis are represented"
179,"https://research.nvidia.com/publication/infinite-resolution-textures","Infinite Resolution Textures","Some nice vector art algorithm"
180,"https://developer.nvidia.com/gpugems/gpugems3/part-iv-image-effects/chapter-25-rendering-vector-art-gpu","Rendering Vector Art On The GPU","The Loop-Blinn method"
181,"https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm","De Casteljau's Algorithm","An algorithm for dividing Bezier curves"
182,"http://developer.download.nvidia.com/devzone/devcenter/gamegraphics/files/opengl/gpupathrender.pdf","GPU-Accelerated Path Rendering","NVPR, Nvidia's driver support for hardware-accelerated vector graphics"
183,"http://kt8216.unixcab.org/murphy/index.html","Drawing Thick Lines","Using the Bresenham's algorithm"
184,"https://mattdesl.svbtle.com/drawing-lines-is-hard","Drawing Lines Is Hard","Showing how difficult it is to even draw a line correctly on the GPU, can be considered an overview of why 2D graphics are actually more difficult than 3D graphics"
185,"https://blog.mapbox.com/drawing-antialiased-lines-with-opengl-8766f34192dc","Drawing Anti-Aliased Lines In OpenGL","Drawing lines with anti-aliasing and miter joins in OpenGL"
186,"http://jcgt.org/published/0002/02/08/","Shader-Based Anti-Aliased, Dashed, Stroked Polylines","Drawing dashed lines on the GPU"
187,"https://nical.github.io/posts/a-look-at-pathfinder.html","A Look At Pathfinder","How does Pathfinder work?"
188,"https://raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html","2D Graphics On Modern GPU","An architecture for 2D graphics similar to RAVG and/or MPVG"
189,"http://hhoppe.com/ravg.pdf","Random-Access Rendering Of General Vector Graphics","RAVG, the successor to Loop-Blinn"
190,"http://w3.impa.br/~diego/projects/GanEtAl14/","Massively-Parallel Vector Graphics","MPVG, the successor to RAVG, uses a quadtree instead of a grid"
191,"http://www0.cs.ucl.ac.uk/staff/m.slater/Teaching/CG/1997-98/Solutions/Trap/","Trapezoidal Decomposition","Decomposing an arbitrarily complex polygon into trapezoids"
192,"https://nical.github.io/posts/lyon-intro.html","Introduction To Lyon: 2D Vector Graphics Rendering On The GPU","Describing the tesselator"
193,"https://raphlinus.github.io/graphics/curves/2019/12/23/flatten-quadbez.html","Flattening Quadratic Bezier Curves","Efficient converting of Bezier curves to polylines"
194,"https://ciechanow.ski/drawing-bezier-curves/","Drawing Bezier Curves","Subdividing Bezier curves, drawing them on iPhone"
195,"https://rubendv.be/posts/fwidth/","Drawing Anti-Aliased Circles In OpenGL","Using fwidth"
196,"https://backend.orbit.dtu.dk/ws/files/3735323/wire-sccg.pdf","Anti-Aliased Wireframe Rendering","Title says it all"
197,"https://github.com/servo/pathfinder/wiki/Related-approaches","Pathfinder Related Approaches","An overview of existing methods for rendering vector graphics"
198,"https://news.ycombinator.com/item?id=23512897","Fast 2D Rendering On GPU","An architecture for rendering 2D vector graphics on modern hardware, with some limitations"
199,"https://raphlinus.github.io/rust/graphics/gpu/2020/06/12/sort-middle.html","A Sort-Middle Architecture For 2D Graphics","Title says it all"
200,"https://blog.mecheye.net/2019/05/why-is-2d-graphics-is-harder-than-3d-graphics/","Why Are 2D Vector Graphics So Much Harder Than 3D?","Some history of vector graphics and how it has become so difficult to render efficiently"
201,"http://m1el.github.io/woscope-how/","How To Draw Oscilloscope Lines With Math And WebGL","Visualizing sound with WebGL"
202,"http://perfectionkills.com/exploring-canvas-drawing-techniques/","Canvas Drawing Techniques","A lot of brushes implemented, very useful if I ever want to make a painting app"
203,"https://www.youtube.com/watch?v=0ifChJ0nJfM","The Principles Of Drawing With Maths","Drawing using ray marching"
204,"http://tavmjong.free.fr/SVG/LINEJOIN_STUDY/","Line Joins Study","Different corner cases of line joins"
205,"https://www.youtube.com/watch?v=aNR4n0i2ZlM","Making A Heart With Maths","Ray marching"
206,"https://www.youtube.com/watch?v=JnCkF62gkOY","Painting A Flower With Maths In Google Sheets","Ray marching + Excel"
207,"https://www.youtube.com/watch?v=s5NGeUV2EyU","Rounding Corners In SDFs","Getting some cool effects for shapes by rounding corners"
208,"https://www.youtube.com/watch?v=PMltMdi1Wzg","Deriving The SDF Of A Line Segment","Getting some very cool shapes(like cilinders) just by modelling a line segment"
209,"https://pomax.github.io/bezierinfo/","A Primer On Bezier Curves","Everything Bezier curves"
210,"http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/","Path Tracing 3D Fractals","Fractals in 3D"
211,"http://www.caffeineowl.com/graphics/2d/vectorial/cubic2quad01.html","Approximating Cubic Bezier Curves By Quadratic Ones","An efficient method for generating quadratic Bezier curves from cubic ones"
212,"http://w3.impa.br/~diego/teaching/vg/","2D Vector Graphics Course","From one of the authors of MPVG"
213,"http://kunzhou.net/zjugaps/pathrendering/","Efficient GPU Path Rendering Using Scanline Rasterization","Pretty complex(but fast) method for rendering vector graphics on the GPU"
214,"https://www.pokitec.com/research/FillingClosedBezierPaths.html","Filling Closed Bezier Paths","Easy to understand description of an algorithm for filling paths, unfortunately not numerically stable"
215,"http://web.engr.oregonstate.edu/~mjb/cs519/Projects/Papers/AcceleratingVectorGraphicsRendering.pdf","Accelerating Vector Graphics Rendering Using The Graphics Hardware Pipeline","How Illustrator makes use of the GPU"
216,"https://www.imedpub.com/articles/an-algorithm-for-computing-the-shortest-distance-between-a-point-and-quadratic-bezier-curve.php?aid=20779","An Algorithm For Computing The Shortest Distance Between A Point And A Quadratic Bezier Curve","Title says it all"
217,"http://alice.loria.fr/publications/papers/2005/VTM/vtm.pdf","Vector Texture Maps On The GPU","Rendering vector graphics using vector textures"
218,"https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.5951&rep=rep1&type=pdf","Precise Vector Textures For Real-Time 3D Rendering","Rendering cubics directly, no approximations"
219,"https://stackoverflow.com/questions/60073813/is-it-possible-to-express-t-variable-from-cubic-bezier-curve-equation/60113617#60113617","Rendering Cubic Bezier Curves In GLSL","Might be useful as a reference"
220,"https://github.com/syaltamimi/image-to-vector","Image To Vector","Generating vector graphics from raster images"
221,"https://github.com/RazrFalcon/tiny-skia","Tiny-Skia","A subset of skia ported to rust, might learn from its source code"
222,"https://people.csail.mit.edu/tzumao/diffvg/","Differentiable Vector Graphics Rasterization For Editing And Learning","Being able to retrieve exactly the same path data just from the rasterized image"
223,"https://magcius.github.io/xplain/article/rast1.html","Basic 2D Rasterization","An easy to understand tutorial introducing vector graphics(anti-aliasing, alpha compositing, gradients and others)"
224,"https://github.com/Const-me/Vrmac#vector-graphics-engine","Vrmac Graphics Engine","Looks good at first sight, might be useful to check its source code"
225,"https://news.ycombinator.com/item?id=26448100","Fitting Cubic Bezier Curves","Algorithm for getting the closes curve to an existing one"
226,"https://raphlinus.github.io/curves/2021/02/19/parallel-curves.html","Cleaner Parallel Curves With Euler Spirals","Simple and efficient way to get parallel curves"
227,"https://renoth.medium.com/understanding-rust-as-a-c-developer-69ee8ca76fd6","Understanding Rust as a C++ Developer","Concise article on some of the similarities/differences between Rust and C++"
228,"https://www.reddit.com/r/learnprogramming/comments/214nd9/making_a_gui_from_scratch/","GUI From Scratch","Ideas for implementing GUI"
229,"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.88.9094&rep=rep1&type=pdf","Don't Fidget With Widgets, Draw!","A very intuitive interface for a GUI, old but relevant"
230,"https://github.com/sixtyfpsui/sixtyfps","SixtyFPS","UI framework similar to Qt(created by ex-Qt employees I think), much less feature rich but has an intuitive interface"
231,"https://github.com/p-ranav/indicators","Activity Indicators","Seems to have a readable codebase, might steal something from here when implementing activity bars in a GUI"
232,"https://github.com/ttauri-project/ttauri","TTauri","A lot of stuff implemented from scratch here, might be useful as a reference"
233,"https://github.com/NXPmicro/gtec-demo-framework/blob/master/Doc/FslSimpleUI.md","Design Considerations For A Modern UI","Definitely worth checking out when implementing a GUI"
234,"https://raytracing.github.io/","Ray Tracing In One Weekend, The Next Week, Rest Of Your Life","Books on ray tracing, easy to follow, includes BVHs and other things"
235,"https://www.codeplay.com/portal/blogs/2020/05/19/ray-tracing-in-a-weekend-with-sycl-basic-sphere-tracing.html","Ray Tracing In A Weekend With SYCL","Ray Tracing In One Weekend but this time with SYCL"
236,"https://github.com/StanEpp/OpenGL_Raytracing","Path Tracing In Compute Shaders Using OpenGL","Easy to understand, might be useful as a reference"
237,"https://blog.scottlogic.com/2020/03/10/raytracer-how-to.html","Write A Raytracer Intuitively","Very easy to follow tutorial on ray tracing"
238,"https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm","Moller-Trumbore Intersection Algorithm","Algorithm for detecting ray intersections with triangles"
239,"https://bheisler.github.io/post/writing-gpu-accelerated-path-tracer-part-1/","Writing A GPU-Accelerated Path Tracer In Rust","Path tracing on the GPU"
240,"http://raytracey.blogspot.com/2016/11/opencl-path-tracing-tutorial-1-firing.html","OpenCL Path Tracing Tutorial","Path tracing on the GPU using OpenCL"
241,"http://raytracey.blogspot.com/2015/10/gpu-path-tracing-tutorial-1-drawing.html","GPU Path Tracing","Using CUDA"
242,"https://www.kevinbeason.com/smallpt/","Smallpt","Path tracing in 99 lines of C++"
243,"https://github.com/vkoskiv/c-ray","C-Ray","Easy to understand source for a path tracer, might be useful as a reference"
244,"https://www.shadertoy.com/view/4lfGWr","Bidirectional Path Tracer","Real time in shadertoy"
245,"https://github.com/CppCon/CppCon2019/tree/master/Presentations/path_tracing_three_ways_a_study_of_cpp_styles","Path Tracing 3 Ways","Using FP, OOP and DOD to make a path tracer in C++"
246,"https://casual-effects.com/research/McGuire2019ProcGen/McGuire2019ProcGen.pdf","Ray Tracing A Tiny Procedural Planet","Drawing a plant using ray tracing"
247,"https://pragprog.com/titles/jbtracer/the-ray-tracer-challenge/","The Ray Tracer Challenge","Easy to understand book on ray tracing, includes some stuff on constructive solid geometry"
248,"https://github.com/ekzhang/rpt","RPT","Physically based path tracer in rust"
249,"https://people.cs.kuleuven.be/~philip.dutre/GI/","Global Illumination Compendium","All maths behind ray tracing"
250,"https://github.com/knightcrawler25/GLSL-PathTracer","GLSL Path Tracer","Path tracer entirely in a fragment shader, has some nice scene tests"
251,"https://www.shadertoy.com/view/3tsyzl","Julia Quaternion","Ray marching a fractal in shadertoy"
252,"https://www.shadertoy.com/view/4ttSWf","Rain Forest","Ray marching terrain in shadertoy"
253,"http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/","Ray Marching Signed Distance Functions","Title says it all"
254,"https://www.youtube.com/watch?v=eED4bSkYCB8","Building Collision Simulations: An Introduction To Computer Graphics","Includes a nice explanation of BVH"
255,"https://en.wikipedia.org/wiki/Bounding_interval_hierarchy","Bounding Interval Hierarchy","A slight improvement of BVHs"
256,"https://computergraphics.stackexchange.com/questions/4979/what-is-importance-sampling","What Is Importance Sampling?","Explained"
257,"https://agraphicsguy.wordpress.com/2015/11/01/sampling-microfacet-brdf/","Sampling Microfacet BRDF","Some sampling theory"
258,"https://agraphicsguynotes.com/posts/monte_carlo_integral_with_multiple_importance_sampling/","Monte Carlo Integration With Multiple Importance Sampling","An explanation of importance sampling"
259,"https://www.gamedev.net/blogs/entry/2261086-importance-sampling/","Importance Sampling","Deep dive into importance sampling"
260,"https://dopedesi.com/2021/03/08/its-raymarching-march/","Ray Marching ASCII Graphics","Generating ASCII art"
261,"https://github.com/xelatihy/yocto-gl","Yocto/GL","Data-Oriented physically based rendering, might be useful as a reference"
262,"https://github.com/CatalaLang/catala","Catala","Programming language for the law"
263,"https://vulkan-tutorial.com/","Vulkan Tutorial","Shows a lot of stuff about vulkan in an easy to understand way"
264,"https://github.com/KhronosGroup/Vulkan-ValidationLayers/blob/master/docs/debug_printf.md","`debug_printf`","Debugging helper for Vulkan"
265,"https://developer.nvidia.com/blog/introduction-turing-mesh-shaders/","Mesh Shaders","A different kind of shader"
266,"https://zeux.io/2020/02/27/writing-an-efficient-vulkan-renderer/","Writing An Efficient Vulkan Renderer","Design considerations for a Vulkan renderer"
267,"https://www.khronos.org/anari","ANARI","Analytic Rendering Interface for Data Visualization"
268,"https://vkguide.dev/","Vulkan Guide","An easy to understand tutorial on Vulkan"
269,"https://vincent-p.github.io/notes/20201216234910-the_projection_matrix_in_vulkan/","The Projection Matrix In Vulkan","Title says it all"
270,"https://arrayfire.com/","ArrayFire","GPGPU cross-platform library"
271,"https://cachemiss.xyz/blog/parallel-reduce-and-scan-on-the-GPU","Parallel Reduce And Scan On The GPU","Title says it all"
272,"https://raphlinus.github.io/gpu/2020/04/30/prefix-sum.html","Prefix Sum On Vulkan","Title says it all"
273,"https://towardsdatascience.com/parallelizing-heavy-gpu-workloads-via-multi-queue-operations-50a38b15a1dc","Parallelizing GPU-Intensive Workloads Via Multi-Queue Operations Using Vulkan Kompute","Do more stuff in parallel with a multi-queue operation"
274,"https://github.com/michaelerule/webgpgpu","WebGPGPU","Bits of image processing in WebGL"
275,"https://gafferongames.com/post/fix_your_timestep/","Fix Your Timestep","Designing a main loop for a game correctly"
276,"https://www.youtube.com/watch?v=aKLntZcp27M","Using Rust For GameDev","General advice for using Rust for gamedev"
277,"https://github.com/eduard-permyakov/permafrost-engine","Permafrost Game Engine","RTS game engine, might be useful as a reference"
278,"https://www.cgal.org/","CGAL","Computational geometry library"
279,"https://www.geometrictools.com/Documentation/TriangulationByEarClipping.pdf","Triangulation By Ear Clipping","Ear clipping explained"
280,"https://flipcode.com/archives/Efficient_Polygon_Triangulation.shtml","Efficient Polygon Triangulation","Code example of polygon triangulation"
281,"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.49.3013&rep=rep1&type=pdf","FITS: Fast Industrial-Strength Triangulation Of Polygons","Ear clipping algorithm"
282,"https://en.wikipedia.org/wiki/Delaunay_triangulation","Delaunay Triangulation","A more efficient triangulation algorithm"
283,"http://commaexcess.com/articles/7/concave-polygon-triangulation-shortcut","Triangulation Using The Stencil Buffer","Quick hack"
284,"https://www.springer.com/gp/book/9783540779735","Computational Geometry: Algorithms And Applications","Book on computational geometry"
285,"https://www.researchgate.net/publication/325488464_Fast_Fluid_Simulations_with_Sparse_Volumes_on_the_GPU","Fast Fluid Simulations With Sparse Volumes On The GPU","Method for rendering fluids on the GPU"
286,"https://developer.download.nvidia.com/books/HTML/gpugems/gpugems_ch38.html","Fast Fluid Dynamics Simulation On The GPU","Fluid simulation on the GPU"
287,"https://github.com/PavelDoGreat/WebGL-Fluid-Simulation","WebGL Fluid SImulation","Might be useful as a reference"
288,"https://www.3dgep.com/understanding-quaternions/","Understanding Quaternions","Quaternions for the layman"
289,"https://marctenbosch.com/quaternions/","Let's Remove Quaternions From Every 3D Game Engine","Better understanding quaternions"
290,"https://blog.winter.dev/2020/designing-a-physics-engine/","Designing A Physiscs Engine","Physics engine design considerations"
291,"https://github.com/polymonster/maths","Maths Library For C++","Useful for games, has a readable codebase, supports swizzling"
292,"https://www.youtube.com/watch?v=JjQxst7kVsU","Simple Mesh Math For Complex Geometry Operations","Fun with matrix multiplications"
293,"https://security.stackexchange.com/questions/211/how-to-securely-hash-passwords","How To Securely Hash Passwords","Discussion on storing passwords"
294,"https://felleisen.org/matthias/7480-s21/index.html","History Of Programming Languages","_Lots_ of resources for studying how various paradigms in PL have evolved"
295,"https://doc.rust-lang.org/nomicon/","Rustonomicon","All the awful details that you need to understand when writing unsafe Rust"
296,"https://en.wikipedia.org/wiki/Storseisundet_Bridge","Storseisundet Bridge","Norway"
297,"https://lwn.net/Kernel/LDD3/","Linux Device Drivers","Writing drivers for Linux"
298,"https://blog.cloudflare.com/http3-the-past-present-and-future/","HTTP/3: The Past, The Present, And The Future","Discussion on what advantages QUIC has over TCP"
299,"https://ro.wikipedia.org/wiki/Cobor,_Bra%C8%99ov","Satul Cobor","Brașov"
300,"https://ro.wikipedia.org/wiki/Cabana_Diham","Cabana Diham","Munții Bucegi"
301,"https://ro.wikipedia.org/wiki/M%C4%83gura,_Bra%C8%99ov","Măgura, Brașov","Mica Elveție, sat situat la poalele munților Bucegi și Piatra Craiului"
302,"https://github.com/microsoft/Web-Dev-For-Beginners","Web Dev For Beginners","Learn by practising, includes quizzes"
303,"https://ro.wikipedia.org/wiki/Inele%C8%9B,_Cara%C8%99-Severin","Ineleț, Caraș-Severin","Foarte izolat, se poate ajunge acolo doar pe o scară de lemn, sau un drum de 4 ore aproape de Băile Herculane"
304,"https://www.facebook.com/St%C3%A2na-din-Grind-la-Gicu-lu-Pipu%C8%9B%C4%83-Piatra-Craiului-1656371127908300/","Stâna din Grind","Munții Piatra Craiului"
305,"https://mikro.naprvyraz.sk/docs/index.htm","Graphics Resources","A huge collection of resource for computer graphics, kind of similar to mathpages"
306,"https://rayground.com/","Rayground","Ray tracing prototyping on the web"
307,"https://refractiveindex.info","Refractiveindex","All the refractive indexes you need"
308,"https://www.geometrictools.com/Documentation/RotationRepresentations.pdf","Rotation Issues","Discussion on different rotation methods"
309,"https://github.com/lettier/3d-game-shaders-for-beginners","3D Game Shaders For Beginners","SSAO, depth of field, lighting, normal mapping and others"
310,"http://igorsklyar.com/system/documents/papers/4/fiscourse.comp.pdf","Importance Sampling For Production Rendering","Explaining (multiple) importance sampling and all the statistics behind it"
311,"https://www.youtube.com/watch?v=E8CBgyFv2xc","Intuitive Idiot-Proof Validation Of Importance Sampling For Monte Carlo Computations","Explaining importance sampling"
312,"https://www.fasterthan.life/blog/2017/7/11/i-am-graphics-and-so-can-you-part-1","I Am Graphics And So Can You","Diving into graphics programming (and Vulkan) for non-experts"
313,"https://www.mark-boer.nl/posts/higher-level-threading","Higher Level Threading In C++","Multithreading primitives explained"
314,"https://www.lpalmieri.com/posts/error-handling-rust/?utm_campaign=Book&utm_source=Reddit&utm_medium=Social","Error Handling In Rust: A Deep Dive","Practical error handling in rust with examples"
315,"http://www.vishalchovatiya.com/cpp20-coroutine-under-the-hood/","C++20 Coroutines: Under The Hood","Thoroughly understanding coroutines in C++"
316,"https://www.forth.com/starting-forth/","Starting FORTH","The classic Forth tutorial"
317,"http://thinking-forth.sourceforge.net/","Thinking Forth","Another Forth classic"
318,"https://learnyousomeerlang.com/content","Learn You Some Erlang For Great Good","Intuitive tutorial on Erlang"
319,"https://github.com/X-Neon/kuro","Kuro","Practical usage of coroutines with examples"
320,"https://www.nytimes.com/interactive/2020/health/pfizer-biontech-covid-19-vaccine.html","How The Pfizer BioNTech Vaccine Works","A more detailed view over the vaccine"
321,"https://pastebin.com/raw/jGkg0SAq","Debug Symbol","HUGE debug symbol, welcome to C++"
322,"https://www.lynalden.com/inflation/","The Ultimate Guide To Inflation","Title says it all"
323,"http://jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/","A CRDT Primer Part I: Defanging Order Theory","Series of articles presenting CRDTs"
324,"https://ro.wikipedia.org/wiki/V%C3%A2rful_Leaota,_Mun%C8%9Bii_Leaota","Leaota","Vârf pe care se poate ajunge cu mașina"
325,"https://www.feynmanlectures.caltech.edu/","The Feynman Lectures On Physics","Proper way to learn physics"
326,"https://blog.compiler.ai/2021/05/06/verification-is-tcbpb-reduction/","Verification = TCB/PB Reduction","What does it mean to formally verify something?"
327,"https://themaister.net/blog/2017/08/15/render-graphs-and-vulkan-a-deep-dive/","Render Graphs And Vulkan, A Deep Dive","Title Says It All"
328,"https://www.gamasutra.com/blogs/EgorYusov/20181211/332596/Taking_State_Transitions_in_Vulkan_and_Direct3D12_under_Control_a_Diligent_Approach.php","Taking State Transitions In Vulkan And Direct3D12 Under Control: A Dilligent Approach","State management and synchronization"
329,"https://arxiv.org/abs/2007.00308","Polar Stroking: New Theory And Methods For Stroking Paths","Render stroked paths robustly, intuitively"
330,"http://w3.impa.br/~diego/projects/Neh20/","Converting Stroked Primitives To Filled Primitives","From one of the authors of MPVG"
331,"https://lamport.azurewebsites.net/tla/high-level-view.html","A High-Level View Of TLA+","Learning TLA+ from Leslie Lamport Himself"
332,"http://docs.idris-lang.org/en/latest/tutorial/","Idris Tutorial","Learning Idris"
333,"https://www.ccs.neu.edu/home/stchang/pubs/cbtb-popl2020.pdf","Dependent Types As Macros","Implementing dependent types using just macros"
334,"https://github.com/veka41/neut","Neut","Programming language without GC, with dependent types"
335,"https://probablydance.com/2020/10/31/using-tla-in-the-real-world-to-understand-a-glibc-bug/","Using TLA+ In The Real World To Understand A Glibc Bug","Practical TLA+"
336,"https://softwarefoundations.cis.upenn.edu/","Software Foundations","Mathematical underpinnings of reliable software"
337,"https://fstar-lang.org/tutorial/tutorial.html","Verified Programming In F*","A nice intro to formal verification"
338,"https://arxiv.org/abs/1808.09701","Comparison Of Two Theorem Provers: Isabelle/HOL And Coq","Includes an overview of logic"
339,"http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/","Seemingly Impossible Functional Programs","Some intersections between maths and FP"
340,"https://arxiv.org/abs/1703.08683","Applied Type System: An Approach To Practical Programming With Theorem Proving","Practical tutorial for ATS"
341,"http://www.cs.toronto.edu/~hehner/FMSD/","Formal Methods Of Software Design","Using maths to write error-free programs"
342,"https://www.lri.fr/~paulin/LASER/course-notes.pdf","Introduction To The Coq Proof Assistant For Practical Software Verification","Practical tutorial on Coq"
343,"http://adam.chlipala.net/cpdt/","Certified Programming With Dependent Types","Tutorial on formal verification"
344,"http://www.ieee-security.org/TC/SPW2014/papers/5103a198.PDF","The Pitfalls Of Protocol Design","Attempting to write a formally verified PDF parser"
345,"https://www.isa-afp.org/","Archive Of Formal Proofs","Huge list of formal proofs"
346,"https://github.com/math-comp/fourcolor","Formal Proof Of The 4-color Theorem","Using coq"
347,"https://hardmath123.github.io/meet-the-robinson.html","Meet The Robinson: An Introduction To Automatic Theorem Proving","Title says it all"
348,"https://www.hillelwayne.com/post/action-properties/","TLA+ Action Properties","A deeper dive into TLA+"
349,"https://pron.github.io/posts/tlaplus_part1","TLA+ In Practice And Theory","Learning formal methods with TLA+"
350,"https://cs.uwaterloo.ca/~plragde/flaneries/LACI/","Logic And Computation Intertwined","Proofs and their applications in computer science"
351,"https://www.youtube.com/watch?v=ngM2N98ppQE","Introduction To Coq","Hands-on intro to Coq"
352,"https://github.com/afonsonf/tlaplus-graph-explorer","TLA+ Graph Explorer","Tool for viewing TLA+ state graphs"
353,"https://www.youtube.com/watch?v=YgXJf8c5PLo","Rebooting The LMARV-1 RISC-V Project","Formally verified RISC-V CPU"
354,"https://github.com/Hirrolot/datatype99","DataType99","Algebraic Data Types for C99"
355,"https://renderdoc.org/vulkan-in-30-minutes.html","Vulkan In 30 Minutes","Short overview of vulkan"
356,"https://chocopy.org/","Chocopy","An educational compiler to RISC-V for a subset of python"
357,"https://llvm.org/docs/tutorial/index.html","Kaleidoscope","Making a programming language with LLVM"
358,"http://hjemmesider.diku.dk/~torbenm/Basics/basics_lulu2.pdf","Basics Of Compiler Design","A lot of stuff that you would need to know if you want to make a compiler, includes register allocation and code generation"
359,"https://swtch.com/~rsc/regexp/regexp1.html","Regex Matching Can Be Simple And Fast","A very nice tutorial on how regex matching doesn't have to be complicated"
360,"https://ruslanspivak.com/lsbasi-part1/","Let's Build A Simple Interpreter","A very easy to follow on building an (incomplete) expression parser"
361,"https://compilers.iecc.com/crenshaw/","Let's Build A Compiler","Non-technical intro to compiler construction(the front-end part)"
362,"https://github.com/cksystemsteaching/selfie","Selfie","Educational repo consisting of a self-compiling C compiler, a self-executing RISC-V emulator and a RISC-V hypervisor"
363,"https://cyberzhg.github.io/toolbox/nfa2dfa","NFA To DFA Converter","Title says it all"
364,"https://www.youtube.com/watch?v=OsGnMm59wb4","Build Your Own Webassebly Compiler","Fantastic talk, nothing to add"
365,"https://jyp.github.io/pdf/Prettiest.pdf","A Pretty But Not Greedy Printer","Reasonably efficient pretty printer implementation"
366,"https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf","A Pretty Printer","Functional description of a pretty printer"
367,"https://journal.stuffwithstuff.com/2015/09/08/the-hardest-program-ive-ever-written/","The Hardest Program I've Ever Written","Discussion on why pretty printers are difficult to implement"
368,"https://increment.com/programming-languages/crash-course-in-compilers/","A Crash Course On Compilers","A simple overview of what compilers are made of"
369,"https://blog.reverberate.org/2013/09/ll-and-lr-in-context-why-parsing-tools.html","Why Parsing Tools Are Hard","Discussion on parsing tools"
370,"https://github.com/DoctorWkt/acwj","A Compiler Writing Journey","Lots of lessons covering almost everything for writing a compiler"
371,"https://journal.stuffwithstuff.com/2011/03/19/pratt-parsers-expression-parsing-made-easy/","Pratt Parsers: Expression Parsing Made Easy","Explaining pratt parsers"
372,"https://www.craftinginterpreters.com/contents.html","Crafting Interpreters","Probably the best overall book on implementing an interpreter"
373,"https://keleshev.com/","Compiling To Assembly From Scratch","A book that covers every part of the compiler"
374,"https://blog.josephmorag.com/posts/mcc0/","Micro C","Writing a compiler for a small subset of C to LLVM in haskell"
375,"https://www.youtube.com/watch?v=b_T-eCToX1I","A New Architecture For Building Software","Improving compile times in LLVM"
376,"https://blog.scottlogic.com/2019/05/17/webassembly-compiler.html","Build Your Own WebAssebly Compiler","Learning more about webassembly and compilers"
377,"http://www.bayfronttechnologies.com/mc_tutorial.html","Metacompilers","Writing compilers inside web pages"
378,"https://arxiv.org/pdf/2005.06444.pdf","Pika Parsing","Reformulating packrat parsing as a dynamic programming algorithm solves the left recursion problem"
379,"https://drops.dagstuhl.de/opus/volltexte/2018/8453/","A Hitchhiker's Guide To Reinventing A Prolog Machine","Fresh look at implementing prolog"
380,"https://en.wikipedia.org/wiki/Warren_Abstract_Machine","Warren Abstract Machine","Abstract machine for executing prolog"
381,"https://news.ycombinator.com/item?id=23376357","C Internals","Seeing how C translates to assembly behind the scenes"
382,"https://tree-sitter.github.io/tree-sitter/","Tree-Sitter","Framework for incremental parsing, it would probably be cool to check it's source code"
383,"https://carolchen.me/blog/technical/jits-impls/","How JIT Compilers Are Implemented And Fast","Seeing how JITs work"
384,"https://github.com/MethodicalAcceleratorDesign/MADdocs/blob/master/luajit/luajit-doc.pdf","LuaJIT Doc","Describing how LuaJIT works"
385,"https://stffrdhrn.github.io/software/toolchain/openrisc/2020/07/21/relocs_tls_impl.html","How Relocations And Thread Local Store Are Implemented","How the compiler takes in account thread local store"
386,"https://eli.thegreenplace.net/2017/adventures-in-jit-compilation-part-1-an-interpreter/","Adventures In JIT Compilation","Building an interpreter for brainfuck"
387,"https://stackoverflow.com/questions/18188612/abstract-syntax-tree-representation-in-c/18189053","Abstract Syntax Tree Representation","Discussion on how an AST might be represented"
388,"http://dmitrysoshnikov.com/courses/parsing-algorithms/","Parsing Algorithms","Title says it all"
389,"http://dmitrysoshnikov.com/courses/essentials-of-interpretation/","Building An Interpreter From Scratch","Title says it all"
390,"https://arzg.github.io/lang/","Make A Programming Language In Rust","Front-end for a compiler, in rust"
391,"https://matklad.github.io/2020/04/13/simple-but-powerful-pratt-parsing.html","Simple But Powerful Pratt Parsing","Pratt parsing explained"
392,"https://www.stephendiehl.com/llvm/","Implementing A JIT Compiled Language With Haskell And LLVM","Title says it all"
393,"http://dev.stephendiehl.com/fun/","Write You A Haskell","Building A Modern Functional Compiler From First Principles"
394,"https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/","Advanced Compilers","The Self Guided Online Course"
395,"https://news.ycombinator.com/item?id=25490826","Essentials Of Compilation","Compiling a subset of racket to x86-64 assembly"
396,"https://mukulrathi.co.uk/create-your-own-programming-language/llvm-ir-cpp-api-tutorial/","A Complete Guide To LLVM For Programming Language Creators","Title says it all"
397,"https://bernsteinbear.com/blog/inline-caching/","Inline Caching","Technique for runtime optimization"
398,"https://github.com/jserv/shecc","SheCC","Educational self hosting C compiler"
399,"https://iucompilercourse.github.io/IU-P423-P523-E313-E513-Fall-2020/","Course Webpage For Compilers","Translating Racket to x86 assembly"
400,"https://www.airs.com/blog/archives/38","Linkers","Series describing how to make a linker"
401,"https://www.youtube.com/watch?v=PXoG0WX0r_E","Implementing A Bignum Calculator","By Rob Pike"
402,"https://www.cl.cam.ac.uk/~pes20/rems/papers/oopsla-elf-linking-2016.pdf","The Missing Link","Explaining ELF Static Linking, Semantically"
403,"https://www.toolchains.net","Toolchains.net","Lots of resources for implementing linkers(and other stuff) or for contributing to clang(even GCC)"
404,"https://bernsteinbear.com/blog/lisp/","Compiling A Lisp","Tutorial on implementing a Lisp compiler"
405,"https://www.elsevier.com/books/engineering-a-compiler/cooper/978-0-12-088478-0","Engineering A Compiler","Alternative To The Dragon Book"
406,"https://www.jsoftware.com/papers/50/","A History Of APL In 50 Functions","Learning APL step by step"
407,"http://zenlang.sourceforge.net/","Zen","Programming language that compiles down to C++"
408,"https://www.unisonweb.org/","Unison Programming Language","A programming language where code is immutable"
409,"https://lowlevelbits.org/type-equality-in-llvm/","Type Equality In LLVM","Low level details of LLVM"
410,"https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system","Hindley Milner Type System","Based on lambda calculus with parametric polymorphism"
411,"http://blog.llvm.org/2011/05/what-every-c-programmer-should-know.html","What Every C Programmer Should Know About Undefined Behavior","Title says it all"
412,"http://www.cs.ioc.ee/ewscs/2010/mycroft/linear-2up.pdf","Linear Types Can Change The World","Deep dive into linear types"
413,"https://codeguppy.com/site/download/draw_with_code_ro.pdf","Javascript For Kids","Learning JS with graphics"
414,"https://evilmartians.com/chronicles/hands-on-webassembly-try-the-basics","Hands-On WebAssembly","Learn webassembly step by step"
415,"http://dev.stephendiehl.com/hask/","What I Wish I Knew When Learning Haskell","Things to know about haskell"
416,"https://www.youtube.com/watch?v=rcjR3--M7iM","Brzozowski Derivatives","Converting from e-NFA to DFA directly"
417,"https://github.com/theacodes/Winterbloom_Castor_and_Pollux/blob/master/firmware/scripts/samd21g18a.ld","The Most Commented Linker Script In The World","Learning more about linker scripts"
418,"https://www.ic.unicamp.br/~meidanis/courses/mc336/2009s2/prolog/problemas/","99 Prolog Problems","Learning prolog through simple problems"
419,"https://www.metalevel.at/prolog","The Power Of Prolog","Learning Prolog"
420,"https://github.com/satwikkansal/wtfpython","WTF Python","Seeing lots of dark corners of Python"
421,"https://www.practical-go-lessons.com/","Practical Go Lessons","Includes a nice chapter on profiling"
422,"https://golang.org/doc/effective_go","Effective Go","Various concepts in Go explained"
423,"https://softwareengineering.stackexchange.com/questions/262377/what-are-the-practical-implications-of-homotopy-type-theory-in-programming","What Are The Practical Implications Of Homotopy Type Theory In Programming?","Title says it all"
424,"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/","Cateory Theory For Programmers","Book on category theory"
425,"https://arxiv.org/abs/1607.04822","HoTTSQL","Using Homotopy Type Theory to optimize SQL queries"
426,"https://python-poetry.org/","Poetry","Python tool for managing environments"
427,"https://astexplorer.net","AST Explorer","See the AST of various programming languages/markup languages"
428,"https://dhall-lang.org","Dhall Configuration Language","DRY config language"
429,"https://github.com/Feral-Lang/Feral","Feral Language","Minimal dynamically-typed language, seems to have a readable codebase"
430,"http://minikanren.org/","MiniKaren","DSL for logic programming"
431,"https://webassembly.studio/","WebAssembly Studio","Online IDE for webassembly"
432,"https://cpufun.substack.co64/p/atomics-in-aarch64","Atomics In AArch64","Dissecting the performance of a simple atomic operation on a couple of ARM AArch64 machines"
433,"https://turriate.com/articles/modern-javascript-everything-you-missed-over-10-years","Modern Javascript: Everything You Missed Over The Last 10 Years","Quick view of new features in JS"
434,"https://www.lightnote.co/","How Music Works","Learning Music Theory"
435,"https://www.susanjfowler.com/blog/2016/8/13/so-you-want-to-learn-physics","So You Want To Learn Physics...","Good resources for learning physics"
436,"https://thebuild.com/presentations/pgconfeu-2016-securing-postgresql.pdf","Securing PostgreSQL","Title says it all, might be applicable to any database"
437,"https://blog.knatten.org/2019/05/24/no-one-knows-the-type-of-char-char/","Noone Knows The Type Of `char + char`","C++ dark corner"
438,"https://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync","Memory Model Synchronization Modes","Explaining memory order for atomics"
439,"https://howardhinnant.github.io/classdecl.html","How I Declare My Classes And Why","Tips on C++ good practice"
440,"https://www.drdobbs.com/cpp/volatile-the-multithreaded-programmers-b/184403766","Volatile: The Multithreaded Programmer's best friend","How volatile helps with multithreading"
441,"https://www.reddit.com/r/cpp/comments/f6wlbm/what_arewere_your_favourite_you_can_do_that_neat/","C++ 'You Can Do That!' Moments","Interesting discussion on C++"
442,"https://www.reddit.com/r/cpp/comments/5rbij8/c_quizzes/","C++ Quizzes","Title says it all"
443,"https://www.youtube.com/watch?v=OyNG4qiWnmU","The C++ Memory Model: An Intuition","Good, concise talk on the memory model of C++"
444,"https://devblogs.microsoft.com/cppblog/the-performance-benefits-of-final-classes/","The Performance Benefits Of Final Classes","Title says it all"
445,"https://eel.is/c++draft/","C++ Standard Draft","Up to date draft of the ISO C++ standard"
446,"https://stackoverflow.com/questions/14589346/is-c-context-free-or-context-sensitive/14589567#14589567","Is C++ Context-Free Or Context-Sensitive?","Interesting discussion on the syntax of C++"
447,"http://www.icce.rug.nl/documents/cplusplus/","C++ Annotations","Modern, up to date intro to C++"
448,"https://mpark.github.io/programming/2017/05/26/constexpr-function-parameters/","Constexpr Function Parameters","How to pass compile-time parameters to functions"
449,"https://github.com/GabrielDosReis/ipr","Compiler-Neutral Internal Program Representation For C++","Internal Program Representation for C++ programs"
450,"https://github.com/microsoft/STL/pull/724","Boyer Moore Searcher With Rytter Correction","Discussion on boyer moore searcher"
451,"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0957r2.pdf","A Generic, Extendable And Efficient Solution For Polymorphic Programming","An alternative to inheritance-style polymorphism"
452,"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0709r0.pdf","Deterministic Exceptions","(Better) Alternative to the current exception mechanism in C++"
453,"https://en.wikipedia.org/wiki/Barton%E2%80%93Nackman_trick","Barton-Nackman Trick","Relying On CRTP To DRY Yourself"
454,"https://en.cppreference.com/w/cpp/coroutine/noop_coroutine","`std::noop_coroutine`","How to implement a basic `task<T>`"
455,"https://en.cppreference.com/w/cpp/coroutine/coroutine_traits","`std::coroutine_traits`","How to implement basic continuation for `std::future`"
456,"https://en.cppreference.com/w/cpp/coroutine/coroutine_handle","`std::coroutine_handle`","How to implement a basic `generator<T>`"
457,"https://oleksandrkvl.github.io/2021/04/02/cpp-20-overview.html","All C++20 Core Lanugage Features With Examples","What every new feature in C++20 has to offer"