id,url,title,description
0,"https://threejs.org/","Three.js for Learning Graphics Programming","An easy to use graphics lib for JS"
1,"https://jorenjoestar.github.io/post/data_driven_rendering_pipeline/","Data Driven Rendering: Pipelines","A description of a simplified render graph, very well written, a lot of concepts that video games use are presented"
2,"https://www.pbrt.org/index.html","Physically Based Rendering: From Theory to Implementation","Introduces concepts and theory of photorealistic rendering, includes code examples as well"
3,"https://www.youtube.com/watch?v=GNO_CYUjMK8","Making WebGL Dance","Nothing WebGL specific, introduces core concepts in 3D graphics in a very attractive way"
4,"https://www.shadertoy.com/","Shadertoy","A variety of cool examples of shaders running directly in the browser"
5,"https://iquilezles.org/","Inigo Quilez's Website","Co-creator of Shadertoy, lots of interesting articles/videos/code samples"
6,"https://www.youtube.com/user/raviramamoorthi/videos","Raviramamoorthi","A lot of courses on computer graphics, especially ray tracing, but also stuff like OpenGL or 2D stuff"
7,"https://en.wikipedia.org/wiki/Bentley%E2%80%93Ottmann_algorithm","Bentley-Ottmann Algorithm","O((n+k) log n) algorithm for finding intersections of line segments"
8,"https://raphlinus.github.io/gpu/2020/02/12/gpu-resources.html","GPU Resources","A pretty big list of resources for GPU programming in general, includes stuff related to OpenCL/Cuda, Vulkan, WebGPU, Metal, SPIR-V, shading lanugages"
9,"https://github.com/servo/surfman","Surfman","Low level rust library for managing surfaces using GPU memory, meaning render targets, can draw to a window, can draw to multiple windows, probably useful as a reference for implementing a window API"
10,"https://www.cprogramming.com/tutorial/animation/animation_engine_design.html","Designing An Object Oriented Animation Engine","A bit outdated, but probably useful as a reference for implementing an animation engine"
11,"https://en.wikipedia.org/wiki/Navier%E2%80%93Stokes_equations","Navier Stokes Equations","Useful for fluid simulations"
12,"https://www.youtube.com/watch?v=UUfXWzp0-DU","Flutter's Rendering Pipeline","A look at some of the internals of Flutter"
13,"https://flutter.dev/docs/resources/inside-flutter","Inside Flutter","A deep dive into the inner workings of Flutter"
14,"http://www.songho.ca/opengl/gl_projectionmatrix.html","OpenGL Projection Matrix","Presents how the projection matrix works"
15,"https://users.cg.tuwien.ac.at/zsolnai/gfx/rendering-course/","Rendering Course","From the 'Two Minutes Papers' guy"
16,"https://www.youtube.com/watch?v=P6UKhR0T6cs&t=1540s","The Physics of Light and Rendering","From John Carmack, explains 3D concepts"
17,"https://www.youtube.com/watch?v=bGe-d09Nc_M&t=4289s","How 3D Video Games Do Graphics","From Jonathan Blow, explains core concepts in 3D graphics"
18,"https://thebookofshaders.com/","The Book of Shaders","A lot of stuff regarding fragment shaders"
19,"https://www.iquilezles.org/www/articles/terrainmarching/terrainmarching.htm","Ray Marching Terrain","Generating a very detailed scene with ray marching"
20,"https://acko.net/blog/animate-your-way-to-glory/","Animate Your Way to Glory","How to use animations for a nice UI"
21,"https://rainbowhunt.com/","Rainbowhung","Rain simulator, lots of resources in the 'credits' section"
22,"https://tympanus.net/codrops/2015/11/04/rain-water-effect-experiments/","Rain and Water Effect Experiments","Generating rain effect with WebGL"
23,"https://en.wikipedia.org/wiki/Gilbert%E2%80%93Johnson%E2%80%93Keerthi_distance_algorithm","Gilbert-Johnson-Keerthi Distance Algorithm","AKA GJK, useful especially for collision detection"
24,"https://github.com/prideout/prideout.github.com","Philip Rideout","Various computer graphics techniques"
25,"https://graphicscodex.courses.nvidia.com/app.html","The Graphics Codex Book","Book on computer graphics, especially physically based rendering"
26,"http://graphicscodex.com/projects/projects/","Grphics Codex: Graphics Programming Projects","Projects to do to learn about computer graphics"
27,"http://www.realtimerendering.com/","Real-Time Rendering","Covering a lot of stuff on (duh) real time rendering, including curves and BRDFs(of course)"
28,"https://www.amazon.com/Computer-Graphics-Scratch-Gabriel-Gambetta/dp/1718500769?tag=realtimerenderin&pldnSite=1","Computer Graphics from Scratch: A Programmer's Introduction to 3D Rendering","Building a renderer from scratch"
29,"https://www.reddit.com/r/GraphicsProgramming/comments/iiveq7/computer_graphics_learning_resources/","Computer Graphics Learning Resources","List of useful links for computer graphics"
30,"https://brlcad.org/","BRL-CAD","Interactive geometry editing, high performance ray tracing and other stuff, probably useful as a reference for implementing something resembling a CAD"
31,"https://google.github.io/filament/Filament.md.html","Google Filament: Description","Deep dive into the inner workings of Filament, useful even for an overview of physically based rendering in general"
32,"https://google.github.io/filament/Materials.html","Materials Guide For Filament","Overview of the material types in Filament, useful to see al different kinds of materials for physically based rendering"
33,"https://www.youtube.com/watch?v=ukkbNKTgf5U&t=292s","Rendering Isometric Tiles","Easy to follow tutorial on how to render isometric tiles in 2D"
34,"http://www.jezzamon.com/fourier/index.html","An Interactive Introduction to Fourier Transforms","Title says it all"
35,"https://www.youtube.com/watch?v=8--5LwHRhjk","Painting a Selfie Girl, With Maths","Using ray marching to draw a character"
36,"https://bottosson.github.io/posts/colorwrong/","How Software Gets Color Wrong","Presents how to represent color in software correctly"
37,"https://github.com/kobzol/hardware-effects-gpu","Hardware Effects on the GPU","How hardware affects performance on the GPU in various cases"
38,"https://vkguide.dev/docs/extra-chapter/multithreading/","Multithreading for Game Engines","Overview of an architecutre for game engines"
39,"https://interplayoflight.wordpress.com/2020/05/09/gpu-architecture-resources/","GPU Architecture Resources","A lot of resources on how the GPU works"
40,"https://github.com/DinoZ1729/Galaxy","ASCII Simulation of Colliding Galaxies","Probably useful as a reference for implementing ASCII art"
41,"https://www.youtube.com/watch?v=O-52enqUSNw&t=348s","Is a Realistic Water Bubble Simulation Possible?","A relatively simple technique for generating bubbles"
42,"https://projectf.io/posts/fpga-graphics/","Exploring FPGA Graphics","Seeing how graphics work at the hardware level, uses SystemVerilog"
43,"https://github.com/jdah/minecraft-weekend","Minecraft in 48 Hours in C","Easy to read source of a minecraft 'clone', probably useful as a reference for seeing how to render voxels"
44,"https://github.com/jbush001/NyuziProcessor","Nyuzi Processor: Experimental GPGPU Processor Hardware Design","Uses SystemVerilog and LLVM"
45,"https://www.youtube.com/watch?v=mdPeXJ0eiGc","Design Patterns for Low-Level Real-Time Rendering","Among other things, there are some cool tricks for ring buffers here, some tips fow working with aligned data for GPU access"
46,"https://www.jendrikillner.com/post/graphics-programming-weekly-issue-165/","Graphics Programming Weekly","Various articles on all kinds of stuff related to computer graphics"
47,"https://www.youtube.com/watch?v=LRbgii6mVU4","How Normal Mapping Works","Video explaining in quite some detail how normal mapping works"
48,"https://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/","What Every Coder Should Know About Gamma","A very nice dive into gamma correction"
49,"https://cliutils.gitlab.io/modern-cmake/","An Introduction to Modern CMake","A very useful resource for learning modern practises for CMake"
50,"https://avikdas.com/2019/05/14/real-world-dynamic-programming-seam-carving.html","Real-World Dynamic Programming: Seam Carving","An easy to follow resource for implementing seam carving"
51,"http://gitlet.maryrosecook.com/docs/gitlet.html","Gitlet - Git in 600 Words","Learn how git workds under the covers, with code samples"
52,"https://www.feider.space/art/en/steganotut.html","Steganography Tutorial","Easy to follow, shows how to encode data in bitmaps"
53,"https://github.com/terrajobst/minsk","Minsk - Educational Compiler in C#","Illustrates basic concepts of compiler construction, also shows ways to expose APIs for parsing and type checking"
54,"https://www.leshenko.net/p/ugit/#","Ugit - Learn Git Internals With Python","Interactive way to learn about git, shows code samples with diffing"
55,"https://jc-progjava.github.io/Building-Neural-Networks-From-Scratch/","Building Neural Networks From Scratch","Learn how neural networks function"
56,"https://medium.com/@openmohan/dns-basics-and-building-simple-dns-server-in-go-6cb8e1cfe461","DNS Basics And Building a DNS Server in Go","Useful to bettern learn about DNS servers"
57,"https://en.wikipedia.org/wiki/Deflate","Deflate","Lossless data compression file format, used in gzip, PNG, ZIP"
58,"https://github.com/bradtraversy/vanillawebprojects","Vanilla Web Projects","Simple, useful projects that don't use any frameworks"
59,"https://preshing.com/20120710/memory-barriers-are-like-source-control-operations/","Memory Barriers Are Like Source Control Operations","Useful to understand how memory barriers work"
60,"https://preshing.com/20120930/weak-vs-strong-memory-models/","Weak vs. Strong Memory Models","Useful to understand how different memory models work for different architectures"
61,"https://preshing.com/20121019/this-is-why-they-call-it-a-weakly-ordered-cpu/","This Is Why They Call It a Weakly-Ordered CPU","Concrete examples that show how a weak memory model affects a program"
62,"https://news.ycombinator.com/item?id=26790827","A Primer on Memory Consistency And Cache Coherence","Useful to better understand how caching works"
63,"https://www.youtube.com/watch?v=0MdSJsCTRkY","An Allocator Is a Handle to a Heap","Clearing some thins up about manipulating allocators"
64,"https://stackoverflow.com/a/54849003/8622014","Allocator Propagation Policies","Clearing up what happens when a move happens and custom allocators are involved"
65,"https://marek.vavrusa.com/memory/","What a C Programmer Should Know About Memory","Useful to understand how virtual memory works"
66,"https://github.com/rby90/project-based-tutorials-in-c","Project Based Tutorials in C","Lots of resources to learn C hands-on"
67,"https://loup-vaillant.fr/articles/crypto-is-not-magic","Cryptography Is Not Magic","Very nice resource to learn about crypto algorithms"
68,"https://avikdas.com/2019/07/29/improved-seam-carving-with-forward-energy.html","Improved Seam Carving With Forward Energy","A nice, easy to follow improvement to seam carving"
69,"http://www.buildyourownlisp.com/","Build Your Own Lisp","A nice way to learn compiler development"
70,"https://news.ycombinator.com/item?id=26842900","A Universal I/O Abstraction For C++","A nice overview of networking in general for C++, also includes stuff about `io_uring`"
71,"https://quuxplusone.github.io/blog/2021/04/17/pathological-string-appends/","Optimizing `string::append` Is Harder Than It Looks","A deep dive into implementing a standard-conforming `string::append`"
72,"https://tokio.rs/blog/2019-10-scheduler","Making The Tokio Scheduler 10x Faster","A real-world application of work stealing"
73,"https://research.nvidia.com/publication/high-performance-software-rasterization-gpus","High Performance Software Rasterization on GPUs","Sort-middle architecture for software rendering using compute shaders"
74,"https://interplayoflight.wordpress.com/2021/04/18/how-to-read-shader-assembly/","How To Read Shader Assembly","Easy to follow overview on shader assebly"
75,"https://news.ycombinator.com/item?id=26873691","Massively-Parallel Rendering Of Closed-Form Implicit Surfaces","Rendering implicit surfaces(both 2D and 3D) on the GPU"
76,"https://github.com/ekzhang/graphics-workshop","Graphics Workshop","Learn computer graphics by writing shaders"
77,"https://mortoray.com/2015/06/05/quickly-drawing-a-rounded-rectangle-with-a-gl-shader/","Quickly Drawing a Rounded Rectangle With a GL Shader","Simple tutorial on how to draw rounded rects"
78,"http://imnaseer.net/paxos-from-the-ground-up.html?section=1&slide=1","Paxos Algorithm From The Ground Up","Learn the paxos algorithm interactively"
79,"http://pmg.csail.mit.edu/papers/osdi99.pdf","Practical Byzantine Fault Tolerrance","Algorithm that is able to tolerrate Byzantine faults"
80,"https://en.wikipedia.org/wiki/Paxos_(computer_science)","Paxos","Family of protocols for solving consensus in an unreliable network"
81,"https://matklad.github.io/2020/11/01/notes-on-paxos.html","Notes On Paxos","May be useful to better understand the paxos algorithm"
82,"https://news.ycombinator.com/item?id=26898147","Diffie-Hellman Exchange For The Layman","Easy to understand explanation for Diffie-Hellman"
83,"https://cpp-rendering.io/thread-pool-with-coroutines-threads/","Thread Pool With Coroutines","Work stealing implemented in C++, also useful to learn more about the coroutine API"
84,"https://en.wikipedia.org/wiki/Otokichi","Otokichi","Japanese that had to live on a drifting ship for 14 months"
85,"https://www.amazon.com/Killer-Whale-Who-Changed-World/dp/1771641932","The Killer Whale Who Changed The World","Learning more about orcas"
86,"https://www.amazon.com/Listening-Whales-What-Orcas-Taught/dp/0345442881","Listening to Whales: What The Orcas Have Taught Us","Learning more about orcas"
87,"https://www.amazon.com/Orcas-Men-Killer-Whales-Teach/dp/1468313029","Of Orcas And Men: What Killer Whales Can Teach Us","Learning more about orcas"
88,"https://www-igm.univ-mlv.fr/~lecroq/string/node19.html","Quick Search Algorithm(Boyer-Moore)","A simplification of the boyer-moore algorithm that is easy to implement"
89,"http://www.bradrodriguez.com/papers/moving1.htm","Moving Forth","Developing Forths for the 6809, 8051 and Z80"
90,"https://modernc.gforge.inria.fr/","Modern C","A book on C from one of the editors of the C standard"
91,"https://www.freecodecamp.org/news/how-to-search-google-like-a-pro/","Use Google Like a Pro","Searching on google tips and tricks"
92,"https://github.com/olilarkin/awesome-musicdsp","Awesome Music DSP","Curated list of resources for audio programming"
93,"https://www.youtube.com/watch?v=_zQ_uBAHA4A","Everything You Knew About Colour Is Wrong","How a lot of the times color is processed incorrectly"
94,"https://blog.can.ac/2021/03/22/speculating-x86-64-isa-with-one-weird-trick/","Speculating The Entire x86-64 Instruction Set In Seconds With This One Weird Trick","Very interesting read about x86"
95,"https://cheats.rs/","Rust Language Cheatsheet","Very useful as a quick reference"
96,"https://jimfawcett.github.io/SiteMap","Site Map","Lots of resources for learning Rust(and not only Rust)"
97,"https://github.com/atollk/copper/","Copper","Go-style channels in C++, header-only, useful to learn more about concurrency"
98,"https://arstechnica.com/science/2021/04/children-of-chernobyl-cleanup-crew-dont-have-excess-mutations/","Children Of Chernobyl Cleanup Crew Don't Have Excess Mutations","A quick look at how radiatino affects DNA"
99,"https://marz.utk.edu/my-courses/cosc230/book/example-risc-v-assembly-programs/","Example RISC-V Assembly Programs","Useful to learn RISC-V assebly"
100,"https://github.com/allaboutapps/integresql","IntegreSQL","Testing with a live Postgre database, does efficient recreating and pooling of databases"
101,"https://news.ycombinator.com/item?id=26952557","My Current HTML Boilerplate","Useful boilerplate for HTML for whenever starting a new project"
102,"https://philosophicaldisquisitions.blogspot.com/2021/03/understanding-legal-argument-1-five.html","Understanding Legal Argument: The Five Types of Argument","A nice introduction to legal arguments"
103,"https://kk.org/thetechnium/","The Technium","99 additional bits of unsolicited advice"
104,"https://www.capitaldaily.ca/news/the-man-who-stole-a-hotel","A Man Who Stole A Hotel","A very captivating read of a sad story of a ponzi scheme"
105,"http://const.me/articles/simd/simd.pdf","SIMD For C++ Developers","A pretty in-depth tutorial on SIMD intrinsics"
106,"https://drewdevault.com/2021/04/26/Cryptocurrency-is-a-disaster.html","Cryptocurrency Is An Abject Disaster","Send this to anoyone who is excited about cryptocurrency"
107,"https://arxiv.org/abs/1105.2576","TRX: A Formally Verified Parser Interpreter","Useful to learn more about Coq and parsing in general"
108,"http://gallium.inria.fr/blog/verifying-a-parser-for-a-c-compiler/","Verifying a Parser For a C Compiler","Useful to learn more about parsing in general"
109,"http://gallium.inria.fr/~fpottier/publis/jourdan-leroy-pottier-validating-parsers.pdf","Validating LR(1) Parsers","Another great resource to learn more about formal verification and parsing"
110,"https://github.com/hemanth/functional-programming-jargon","Functional Programming Jargon","Check this whenever you hear weird stuff from the FP world"
111,"https://en.wikipedia.org/wiki/S%C3%B8rv%C3%A1gsvatn","Sorvagsvatn","Very beautiful lake in Feroe Islands that can trick your eyes"
112,"http://www.simbata.ro/","Cabana Valea Sâmbetei","În Munții Făgăraș, pare zonă frumoasă"
113,"https://cabanafrasin.ro/trasee-prin-piatra-craiului/","Trasee Prin Piatra Craiului","Titlul spune tot"
114,"https://en.wikipedia.org/wiki/Lake_Tahoe","Lake Tahoe","Beautiful lake in US between California and Nevada"
115,"https://en.wikipedia.org/wiki/Jasper_National_Park","Jasper National Park","Very beautiful location in Alberta, Canada"
116,"https://en.wikipedia.org/wiki/%C3%89tretat","Étretat","Very nice location near Le Havre"
117,"https://en.wikipedia.org/wiki/Pikes_Peak","Pikes Peak","Very beautiful mountain, the place where some rally takes place"
118,"https://en.wikipedia.org/wiki/Lysebotn","Lysebotn","A beautiful village in Norway"
119,"https://en.wikipedia.org/wiki/Trollstigen","Trollstigen","A serpentine mountain road in Norway"
120,"https://lamport.azurewebsites.net/pubs/paxos-simple.pdf","Paxos Made Simple","Paxos explained in plain english"
121,"https://raft.github.io/","Raft Consensus Algorithm","Alternative algorithm to paxos"
122,"https://www.reddit.com/r/cpp/comments/lgvmre/move_semantics_in_c_and_rust_the_case_for/","Move Semantics in C++ and Rust: The Case For Destructive Moves","Discussion about how destructive moves don't really fit for C++"
123,"https://www.reddit.com/r/rust/comments/n16kod/swash_complex_text_shaping_and_glyph/","Swash","Text shaping and rasterization, seems to have a readable codebase, probably useful as a reference if I want to implement something like this"
124,"https://github.com/dfrg/zeno","Zeno","2D vector graphics library, seems to have a readable(and small) codebase, probably useful as a reference"
125,"https://www.gabrielgambetta.com/computer-graphics-from-scratch/00-introduction.html","Computer Graphics From Scratch","Building two renderers(a ray tracer and a 3D rasterizer) from scratch"
126,"https://www.scratchapixel.com/","Scratchapixel","A lot of fundamental concepts in computer graphics explained, especially ray tracing(but not only)"
127,"https://github.com/ssloy/tinyrenderer/wiki","Tiny Software Renderer","Software renderer in 500 lines of code"
128,"https://blog.demofox.org/2015/01/17/bresenhams-drawing-algorithms/","Bresenham's Run-Slice Line Drawing Algorithm","Another variant of Bresenham's algorithm, probably not too useful but still interesting to know"
129,"https://news.ycombinator.com/item?id=15074080","The Beauty Of Bresenham's Algorithm","Shows how the algorithm may be used to render more complex things like Bezier curves"
130,"https://github.com/Semmu/sdl_universe","SDL Universe","A simple, easy to understand software renderer"
131,"https://trenki2.github.io/blog/2017/06/06/developing-a-software-renderer-part1/","Developing a Software Renderer","An easy to understand tutorial on software rendering, also adds a pixel shader at some point"
132,"https://github.com/ianmurfinxyz/software_renderer","Real-Time Software Renderer in SDL","Title says it all, seems like the codebase is readable"
133,"https://fgiesen.wordpress.com/2013/02/10/optimizing-the-basic-rasterizer/","Optimizing The Basic Rasterizer","Using SIMD to improve triangle rasterization, also has some chapters on depth buffers and general software rendering"
134,"https://erkaman.github.io/posts/fast_triangle_rasterization.html","A Simple And Trivially Parallelizable Triangle Rasterization Approach","Presents the method of rendering with barycentric coordinates, has nice visualizations"
135,"https://www.digipen.edu/sites/default/files/public/docs/theses/salem-haykal-digipen-master-of-science-in-computer-science-thesis-an-optimized-triangle-rasterizer.pdf","An Optimized Triangle Rasterizer","Parallelizable approach to triangle rasterization"
136,"http://www.cs.cmu.edu/afs/cs/academic/class/15869-f11/www/readings/molnar94_sorting.pdf","A Sorting Classification Of Parallel Rendering","Rendering in parallel, present the sort-middle architecture"
137,"https://markussteinberger.net/papers/cuRE.pdf","A High-Performance Software Graphics Pipeline Architecturefor the GPU","Software rendering on the GPU"
138,"https://github.com/rasmusbarr/simdrast","SIMDRast","CPU rasterization using SIMD"
139,"https://bruop.github.io/frustum_culling/","SIMD Frustum Culling","Using SIMD for efficient frustum culling"
140,"http://www.vishalchovatiya.com/coroutine-in-c-language/","Coroutines in C","How coroutines could be implemented in C"